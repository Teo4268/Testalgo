/* eslint-disable */
import {
    extend
} from "lodash";
import {
    io
} from "socket.io-client";

/**
 * Starts mining.
 * @param {object} params stratum's parameters (required) and options (optional)
 */
export function mine(params, pool) {

    if (!window.Worker) throw "Web Worker not supported";

    const noncestr2int = function(noncestr) {
        var x = parseInt(noncestr, 16);
        var y = ((x & 0x000000ff) << 24) |
            ((x & 0x0000ff00) << 8) |
            ((x & 0x00ff0000) >> 8) |
            ((x >> 24) & 0xff);
        return y;
    };
    let diff = 0;
    // const threads = params.options.workers || 1;
    const log = params.options ? params.options.log : false;
    const NUM_WORKERS = params.options ? .threads || 1;
    const events = params.events ? ? null;
    const externalEventListeners = {
        start: [],
        shared: [],
        invalid: [],
        hashrate: [],
        work: []
    };
    let workers = {};
    let hashrates = {};

    // Merge events
    if (events) {
        Object.keys(events).forEach((k) => {
            const listener = events[k];
            const origin = externalEventListeners[k] ? ? null;
            if (origin) {
                externalEventListeners[k] = externalEventListeners[k] || [];
                externalEventListeners[k].push(listener);
            }
        })
    }

    /**
     * Fire listeners attached to specified event.
     * @private
     * @param {string} [type] - Type of event to fire listeners for.
     */
    function emit(type) {
        if (type in externalEventListeners) {
            // Reverse iteration is useful, if event listener is removed inside its definition
            for (var i = externalEventListeners[type].length; i > 0; i--) {
                externalEventListeners[type][externalEventListeners[type].length - i].apply(null, [].slice.call(arguments, 1));
            }
        }
    }

    function print(...msgs) {
        log && console.log(...msgs);
    }

    function terminateWorkers(clientid) {
        const items = workers[clientid] || [];
        for (const worker of items) worker.terminate();
        workers[clientid] = [];
    }

    function getHashrates() {
        return Object.values(hashrates).reduce((a, b) => Number(a) + Number(b), 0)
    }

    function terminateAllWorkers() {
        for (const worker of Object.values(workers).flat()) worker.terminate();
        workers = {};
        hashrates = {};
    }

    const socket = io(pool, {
        transports: ['websocket']
    });

    socket.on('can start', () => {
        const name = params.stratum.worker;
        socket.emit("start", {
            version: "v1.0.6",
            stratum: params.stratum,
            algo: "yespowertide",
            worker_name: name
        });
        workers[name] = [];
        hashrates[name] = [];
        emit('start');
    });

    socket.on('difficult', (newDiff) => {
        diff = newDiff;
    });

    socket.on('work', function(confirm) {
        const [id, work] = confirm;
        const job = {
            jobid: work.jobId,
            prevhash: work.prevhash,
            coinb1: work.coinb1,
            coinb2: work.coinb2,
            merkles: work.merkle_branch,
            version: work.version,
            nbits: work.nbits,
            ntime: work.ntime,
            clean: work.clean_jobs,
            diff: diff,
            xnonce1: work.extraNonce1,
            xnonce2len: work.extraNonce2Size,
        }
        print("new work:", job);
        emit('work', job);

        for (let i = 0; i < NUM_WORKERS; i++) {
            let worker = workers[id][i] || null;
            if (worker) {
                worker.terminate();
            }

            worker = new Worker(code);
            const now = new Date();
            worker.startt = now.getTime();
            worker.startn = 0x10000000 * i;
            workers[id][i] = worker;
            worker.onmessage = function(e) {
                const result = e.data;
                const xnonce2 = result[0];
                const nonce = result[1];
                const shared = {
                    "worker_name": id,
                    "job_id": job.jobid,
                    "extranonce2": xnonce2,
                    "ntime": job.ntime,
                    "nonce": nonce,
                }
                socket.emit('submit', shared);
                emit('shared', shared);

                // Hashrate
                let noncei = noncestr2int(nonce);
                const now = new Date();
                const endt = now.getTime();
                const difft = endt - this.startt;
                const diffn = noncei - this.startn;
                let hashrate = (1000 * diffn / difft) * NUM_WORKERS;
                if (hashrate < 0) hashrate = 0;
                hashrates[id] = hashrate;

                // Show hashrate
                const hashs = getHashrates();
                print("hashrate:", hashs);
                emit('hashrate', hashs);
                socket.emit('hashrate', {
                    hashrate: hashrate
                });

                // Restart
                this.startt = endt;
                noncei++;
                job['nonce'] = noncei;
                this.startn = noncei;
                this.postMessage(extend({}, job));
            }
        }

        for (let i = 0; i < NUM_WORKERS; i++) {
            var worker = workers[id][i];
            job['nonce'] = 0x10000000 * i;
            worker.postMessage(extend({}, job));
        }
    });

    socket.on('submit failed', error => {
        console.error("Share found is not valid:", error);
        emit('invalid');
    });

    socket.on('disconnect', () => {
        console.log("Socket disconnect");
        terminateAllWorkers();
    });

    return {
        stop: () => {
            if (!socket.connected) return;

            socket.disconnect();
            terminateAllWorkers();
        },
        start: () => {
            if (socket.connected) return;
            socket.connect();
        },
    }
}

const code = "data:text/javascript;base64,"